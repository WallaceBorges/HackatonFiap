// <auto-generated />
using System;
using AtivosTC5.Infra.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HealthAndMed.Infra.Data.Migrations
{
    [DbContext(typeof(SqlServerContext))]
    partial class SqlServerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HealthAndMed.Domain.Entities.EspecialidadeMedica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EspecialidadeMedica", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "Clínico Geral"
                        },
                        new
                        {
                            Id = 2,
                            Nome = "Pediatra"
                        },
                        new
                        {
                            Id = 3,
                            Nome = "Cardiologista"
                        },
                        new
                        {
                            Id = 4,
                            Nome = "Ginecologista e Obstetra"
                        },
                        new
                        {
                            Id = 5,
                            Nome = "Dermatologista"
                        },
                        new
                        {
                            Id = 6,
                            Nome = "Ortopedista e Traumatologista"
                        },
                        new
                        {
                            Id = 7,
                            Nome = "Neurologista"
                        },
                        new
                        {
                            Id = 8,
                            Nome = "Psiquiatra"
                        },
                        new
                        {
                            Id = 9,
                            Nome = "Oftalmologista"
                        },
                        new
                        {
                            Id = 10,
                            Nome = "Endocrinologista"
                        },
                        new
                        {
                            Id = 11,
                            Nome = "Gastroenterologista"
                        },
                        new
                        {
                            Id = 12,
                            Nome = "Urologista"
                        },
                        new
                        {
                            Id = 13,
                            Nome = "Hematologista"
                        },
                        new
                        {
                            Id = 14,
                            Nome = "Oncologista"
                        },
                        new
                        {
                            Id = 15,
                            Nome = "Nefrologista"
                        },
                        new
                        {
                            Id = 16,
                            Nome = "Reumatologista"
                        },
                        new
                        {
                            Id = 17,
                            Nome = "Otorrinolaringologista"
                        },
                        new
                        {
                            Id = 18,
                            Nome = "Pneumologista"
                        },
                        new
                        {
                            Id = 19,
                            Nome = "Infectologista"
                        },
                        new
                        {
                            Id = 20,
                            Nome = "Cirurgião Geral"
                        });
                });

            modelBuilder.Entity("HealthAndMed.Domain.Entities.UsuarioBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("Cpf")
                        .HasColumnType("bigint");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipoUsuario")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Usuario", (string)null);

                    b.HasDiscriminator().HasValue("UsuarioBase");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("HealthAndMed.Domain.ValueObjects.Agenda", b =>
                {
                    b.Property<int>("Medico_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataAtendimento")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("DataAgendou")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Especialidade_Id")
                        .HasColumnType("int");

                    b.Property<int?>("Paciente_Id")
                        .HasColumnType("int");

                    b.Property<string>("Prontuario")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("isAtendico")
                        .HasColumnType("bit");

                    b.HasKey("Medico_Id", "DataAtendimento");

                    b.HasIndex("Especialidade_Id");

                    b.HasIndex("Paciente_Id");

                    b.ToTable("Agenda", (string)null);
                });

            modelBuilder.Entity("HealthAndMed.Domain.ValueObjects.MedicoEspecialidade", b =>
                {
                    b.Property<int>("Medico_Id")
                        .HasColumnType("int");

                    b.Property<int>("EspecialidadeMedica_Id")
                        .HasColumnType("int");

                    b.HasKey("Medico_Id", "EspecialidadeMedica_Id");

                    b.HasIndex("EspecialidadeMedica_Id");

                    b.ToTable("MedicoEspecialidade", (string)null);
                });

            modelBuilder.Entity("HealthAndMed.Domain.Entities.UsuarioMedico", b =>
                {
                    b.HasBaseType("HealthAndMed.Domain.Entities.UsuarioBase");

                    b.Property<string>("CRM")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Especialidade_Id")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("UsuarioMedico");
                });

            modelBuilder.Entity("HealthAndMed.Domain.Entities.UsuarioPaciente", b =>
                {
                    b.HasBaseType("HealthAndMed.Domain.Entities.UsuarioBase");

                    b.HasDiscriminator().HasValue("UsuarioPaciente");
                });

            modelBuilder.Entity("HealthAndMed.Domain.ValueObjects.Agenda", b =>
                {
                    b.HasOne("HealthAndMed.Domain.Entities.EspecialidadeMedica", "EspecialidadeMedica")
                        .WithMany("agendas")
                        .HasForeignKey("Especialidade_Id");

                    b.HasOne("HealthAndMed.Domain.Entities.UsuarioMedico", "Medico")
                        .WithMany("Agendas")
                        .HasForeignKey("Medico_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HealthAndMed.Domain.Entities.UsuarioPaciente", "Paciente")
                        .WithMany("Agendas")
                        .HasForeignKey("Paciente_Id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("EspecialidadeMedica");

                    b.Navigation("Medico");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("HealthAndMed.Domain.ValueObjects.MedicoEspecialidade", b =>
                {
                    b.HasOne("HealthAndMed.Domain.Entities.EspecialidadeMedica", "Especialidade")
                        .WithMany("medicoEspecialidades")
                        .HasForeignKey("EspecialidadeMedica_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthAndMed.Domain.Entities.UsuarioMedico", "Medico")
                        .WithMany("medicoEspecialidade")
                        .HasForeignKey("Medico_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Especialidade");

                    b.Navigation("Medico");
                });

            modelBuilder.Entity("HealthAndMed.Domain.Entities.EspecialidadeMedica", b =>
                {
                    b.Navigation("agendas");

                    b.Navigation("medicoEspecialidades");
                });

            modelBuilder.Entity("HealthAndMed.Domain.Entities.UsuarioMedico", b =>
                {
                    b.Navigation("Agendas");

                    b.Navigation("medicoEspecialidade");
                });

            modelBuilder.Entity("HealthAndMed.Domain.Entities.UsuarioPaciente", b =>
                {
                    b.Navigation("Agendas");
                });
#pragma warning restore 612, 618
        }
    }
}
